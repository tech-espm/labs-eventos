
<div class="row">
	<div class="col-lg-12">
		<div class="panel panel-default">
			<div class="panel-body dataTable_wrapper">
				<div class="mb-3">
					<button class="btn btn-primary" type="button" onclick="criarPalestrante()"><i class="fa fa-plus"></i>Criar Palestrante...</button>
					<button class="btn btn-primary btn-outline" type="button" onclick="mostrarGridAceite()"><i class="fa fa-table"></i>Exibir Grade de Aceites...</button>
				</div>
				<table class="table table-striped table-hover" id="tabela-palestrantes"></table>
			</div>
		</div>
	</div>
</div>

<div class="modal fade" tabindex="-1" role="dialog" id="modalAlterarPalestrante">
	<div class="modal-dialog" role="document">
		<form class="modal-content" id="formAlterarPalestrante" method="post">
			<div class="modal-header">
				<button type="button" class="close" data-dismiss="modal" aria-label="Fechar"><span aria-hidden="true">&times;</span></button>
				<h4 class="modal-title">Palestrante</h4>
			</div>
			<div class="modal-body">
				<div class="form-group">
					<label for="txtPalestranteNome">Nome</label>
					<input id="txtPalestranteNome" name="txtPalestranteNome" class="form-control" type="text" maxlength="100" spellcheck="false" />
				</div>
				<div class="form-group">
					<label for="txtPalestranteNomeCurto">Nome para Divulgação</label>
					<input id="txtPalestranteNomeCurto" name="txtPalestranteNomeCurto" class="form-control" type="text" maxlength="45" spellcheck="false" />
				</div>
				<div class="form-group">
					<label for="txtPalestranteEmail">E-mail</label>
					<input id="txtPalestranteEmail" name="txtPalestranteEmail" class="form-control upper" type="email" maxlength="100" spellcheck="false" />
				</div>
				<div class="row">
					<div class="col-xs-4">
						<div class="form-group">
							<label for="cbPalestranteOculto">Oculto</label>
							<select id="cbPalestranteOculto" name="cbPalestranteOculto" class="form-control upper" size="1"><option value="0">NÃO</option><option value="1">SIM</option></select>
						</div>
					</div>
					<div class="col-xs-4">
						<div class="form-group">
							<label for="cbPalestranteConfirmado">Confirmado</label>
							<select id="cbPalestranteConfirmado" name="cbPalestranteConfirmado" class="form-control upper" size="1"><option value="0">NÃO</option><option value="1">SIM</option></select>
						</div>
					</div>
					<div class="col-xs-4">
						<div class="form-group">
							<label for="txtPalestrantePrioridade">Prioridade</label>
							<input id="txtPalestrantePrioridade" name="txtPalestrantePrioridade" class="form-control upper" type="number" min="-100" max="100" />
						</div>
					</div>
				</div>
				<div class="form-group">
					<label for="cbPalestranteEmpresa">Empresa</label>
					<select id="cbPalestranteEmpresa" name="cbPalestranteEmpresa" class="form-control" size="1"><option value="">SELECIONE...</option></select>
				</div>
				<div class="form-group">
					<label for="txtPalestranteCargo">Cargo</label>
					<input id="txtPalestranteCargo" name="txtPalestranteCargo" class="form-control" type="text" maxlength="45" spellcheck="false" />
				</div>
				<div class="form-group">
					<label for="txtPalestranteUrlSite">URL do Site <small><i>(http://... ou https://...)</i></small></label>
					<input id="txtPalestranteUrlSite" name="txtPalestranteUrlSite" class="form-control" type="url" maxlength="100" spellcheck="false" />
				</div>
				<div class="form-group">
					<label for="txtPalestranteUrlTwitter">URL do Twitter <small><i>(http://... ou https://...)</i></small></label>
					<input id="txtPalestranteUrlTwitter" name="txtPalestranteUrlTwitter" class="form-control" type="url" maxlength="100" spellcheck="false" />
				</div>
				<div class="form-group">
					<label for="txtPalestranteUrlFacebook">URL do Facebook <small><i>(http://... ou https://...)</i></small></label>
					<input id="txtPalestranteUrlFacebook" name="txtPalestranteUrlFacebook" class="form-control" type="url" maxlength="100" spellcheck="false" />
				</div>
				<div class="form-group">
					<label for="txtPalestranteUrlLinkedIn">URL do LinkedIn <small><i>(http://... ou https://...)</i></small></label>
					<input id="txtPalestranteUrlLinkedIn" name="txtPalestranteUrlLinkedIn" class="form-control" type="url" maxlength="100" spellcheck="false" />
				</div>
				<div class="form-group">
					<label for="txtPalestranteBio">Biografia <small><i>(Até 1000 caracteres)</i></small></label>
					<textarea id="txtPalestranteBio" name="txtPalestranteBio" class="form-control" maxlength="1000"></textarea>
				</div>
				<div class="form-group">
					<label for="txtPalestranteBioCurta">Biografia Curta <small><i>(Até 200 caracteres)</i></small></label>
					<textarea id="txtPalestranteBioCurta" name="txtPalestranteBioCurta" class="form-control" maxlength="200"></textarea>
				</div>
				<div class="form-group">
					<label for="txtPalestranteImagem">Imagem</label>
					<button type="button" class="btn btn-outline btn-primary btn-sm" onclick="downloadTwitter()"><i class="fa fa-twitter"></i>Buscar Imagem do Twitter</button>
					<div id="lblPalestranteImagemTwitter" style="display: none"><label class="col-h2">Utilizando imagem do Twitter <i class="fa fa-check fa-nomargin"></i></label></div>
					<input id="txtPalestranteImagem" name="txtPalestranteImagem" class="form-control" type="file" accept="image/*" />
				</div>
				<div class="form-group hidden">
					<label for="cbPalestranteImagemModo">Modo de Ajuste da Imagem</label>
					<select id="cbPalestranteImagemModo" name="cbPalestranteImagemModo" class="form-control upper" size="1">
						<option value="" selected="selected">AMPLIAR (SEM BORDAS)</option>
						<option value="1">REDUZIR PARA CABER (COM BORDAS)</option>
					</select>
				</div>
			</div>
			<div class="modal-footer">
				<button type="submit" class="btn btn-primary"><i class="fa fa-check"></i><span id="lblAlterarPalestrante">Criar Palestrante</span></button>
				<button type="button" class="btn btn-outline btn-default" data-dismiss="modal"><i class="fa fa-times"></i>Cancelar</button>
			</div>
		</form>
	</div>
</div>

<div class="modal fade" tabindex="-1" role="dialog" id="modalExcluirPalestrante">
	<div class="modal-dialog" role="document">
		<div class="modal-content">
			<div class="modal-header">
				<button type="button" class="close" data-dismiss="modal" aria-label="Fechar"><span aria-hidden="true">&times;</span></button>
				<h4 class="modal-title">Oops...</h4>
			</div>
			<div class="modal-body">
				<p>
					Tem certeza que deseja excluir o palestrante <span id="lblExcluirPalestrante"></span>? Esta operação <b class="col-h">NÃO</b> pode ser desfeita!
				</p>
			</div>
			<div class="modal-footer">
				<button type="button" class="btn btn-danger" onclick="excluirPalestrante()"><i class="fa fa-check"></i>Excluir</button>
				<button type="button" class="btn btn-outline btn-default" data-dismiss="modal"><i class="fa fa-times"></i>Cancelar</button>
			</div>
		</div>
	</div>
</div>

<div class="modal fade" tabindex="-1" role="dialog" id="modalLinkPalestrante">
	<div class="modal-dialog" role="document">
		<div class="modal-content">
			<div class="modal-header">
				<button type="button" class="close" data-dismiss="modal" aria-label="Fechar"><span aria-hidden="true">&times;</span></button>
				<h4 class="modal-title">Link</h4>
			</div>
			<div class="modal-body">
				<div class="mb-3"><button id="btnLinkPalestrante" type="button" class="btn btn-primary"><i class="fa fa-copy"></i>Copiar</button></div>
				<a id="aLinkPalestrante" href="#" target="_blank" style="word-break: break-all;"></a>
			</div>
			<div class="modal-footer">
				<button type="button" class="btn btn-outline btn-default" data-dismiss="modal"><i class="fa fa-times"></i>Fechar</button>
			</div>
		</div>
	</div>
</div>

<div class="modal fade" tabindex="-1" role="dialog" id="modalGridAceite">
	<div class="modal-dialog modal-flex" role="document">
		<div class="modal-content">
			<div class="modal-header">
				<button type="button" class="close" data-dismiss="modal" aria-label="Fechar"><span aria-hidden="true">&times;</span></button>
				<h4 class="modal-title">Grade de Aceites</h4>
			</div>
			<div class="modal-body" id="modalGridAceiteBody"></div>
			<div class="modal-footer">
				<button type="button" class="btn btn-outline btn-default" data-dismiss="modal"><i class="fa fa-times"></i>Fechar</button>
			</div>
		</div>
	</div>
</div>

<script type="text/javascript">
	//<![CDATA[
	"use strict";

	// Como não podemos utilizar o contentFor("scripts"), porque o alterar.ejs
	// será utilizado como include para outra página, precisamos executar a
	// função apenas quando o documento estiver ok
	$(function () {
		var idevento = <%- idevento %>;
		var extensaoImagem = "<%- extensaoImagem %>";
		var caminhoAbsolutoPastaExterno = "<%- caminhoAbsolutoPastaExterno %>";
		carregarEmpresas(<%- empresas %>);
		carregarPalestrantes(<%- palestrantes %>);

		var tabela = prepareDataTable("tabela-palestrantes", {
			order: [[2, "asc"]],
			deferRender: true,
			columns: [
				{ title: "", "class": "col-min", searchable: false, orderable: false, data: "id", render: function (v, type, row) { return "<button title=\"Editar\" type=\"button\" class=\"btn btn-outline btn-primary\"><i class=\"fa fa-nomargin fa-edit\"></i></button> <button title=\"Link de Edição Externa\" type=\"button\" data-link=\"1\" class=\"btn btn-outline btn-default\"><i class=\"fa fa-nomargin fa-link\"></i></button> <button title=\"Link de Compartilhamento\" type=\"button\" data-share=\"1\" class=\"btn btn-outline btn-default\"><i class=\"fa fa-nomargin fa-share-alt\"></i></button><br /><button title=\"Certificado\" type=\"button\" data-certificado=\"1\" class=\"btn btn-outline btn-default\"><i class=\"fa fa-nomargin fa-id-card-o\"></i></button> <button title=\"Excluir\" type=\"button\" data-excluir=\"1\" class=\"btn btn-outline btn-danger\"><i class=\"fa fa-nomargin fa-times\"></i></button>"; } },
				{ title: "", "class": "col-min", searchable: false, orderable: false, data: "id", render: function (v, type, row) { return "<img alt=\"Imagem da Palestrante\" class=\"palestrante-img\" src=\"" + caminhoAbsolutoPastaExterno + "/" + v + "." + extensaoImagem + "?v=" + row.versao + "\" />"; } },
				{ title: "Nome", "class": "col-larga", data: "nome" },
				{ title: "Nome para Divulgação", "class": "col-larga", data: "nome_curto" },
				{ title: "Oculto", "class": "col-min", data: function (row, type, set, meta) { return (row.oculto ? "<span class=\"col-h\">SIM</span>" : "NÃO"); } },
				{ title: "Confirmado", "class": "col-min", data: function (row, type, set, meta) { return (row.confirmado ? "SIM" : "<span class=\"col-h\">NÃO</span>"); } },
				{ title: "Prioridade", "class": "col-min text-right", data: "prioridade" },
				{ title: "E-mail", data: "email" },
				{ title: "Empresa", data: "nome_empresa" },
				{ title: "Cargo", data: "cargo" },
				{ title: "Link de Compartilhamento", data: function (row, type, set, meta) { var str = gerarLinkDeCompartilhamento(row.nome); return '<a target="_blank" class="link-curto" href="' + str + '">' + str + '</a>'; } },
			],
			data: eventoPalestrantes,
			export: { title: "Palestrantes do Evento" }
		});

		var trClicada, preparandoImagem = false, imagemTwitter = null, urlImagemTwitter = null;

		prepareCbSearch(_("cbPalestranteEmpresa"));
		fixUrlOnBlur(_("txtPalestranteUrlSite"));
		fixUrlOnBlur(_("txtPalestranteUrlTwitter"));
		fixUrlOnBlur(_("txtPalestranteUrlFacebook"));
		fixUrlOnBlur(_("txtPalestranteUrlLinkedIn"));
		prepareCopyHandler(_("modalLinkPalestrante"), "#btnLinkPalestrante");

		$("#modalAlterarPalestrante").on("show.bs.modal", function () {
			var parent = $("#txtPalestranteImagem").parent();
			$("#txtPalestranteImagem").remove();
			parent.append("<input id=\"txtPalestranteImagem\" name=\"txtPalestranteImagem\" class=\"form-control\" type=\"file\" accept=\"image/*\" />");

			preencherCb(_("cbPalestranteEmpresa"), eventoEmpresas, trClicada ? tabela.row(trClicada).data().idempresa : idempresapadrao.toString());
		});

		$("#modalAlterarPalestrante").on("shown.bs.modal", function () {
			$("#txtPalestranteNome").focus();
		});

		$("#tabela-palestrantes").on("click", "tbody button", function () {
			if ($.active || JsonWebApi.active)
				return;

			var palestrante = tabela.row(trClicada = this.parentNode.parentNode).data();

			if (this.getAttribute("data-excluir")) {
				$("#lblExcluirPalestrante").text(palestrante.nome);

				$("#modalExcluirPalestrante").modal({
					backdrop: "static",
					keyboard: true
				});
			} else if (this.getAttribute("data-link")) {
				Notification.wait();

				JsonWebApi.get("<%- root %>/api/palestrante/gerarLinkExterno/" + palestrante.id, function (response) {
					if (response.success) {
						Notification.hide();

						var a = _("aLinkPalestrante");
						a.setAttribute("href", response.value);
						a.textContent = response.value;

						a = _("btnLinkPalestrante");
						a.setAttribute("data-clipboard-text", response.value);

						$("#modalLinkPalestrante").modal({
							backdrop: "static",
							keyboard: true
						});
					} else {
						Notification.error("Algo saiu errado! Por favor, tente novamente mais tarde " + emoji.sad);
					}
				});
			} else if (this.getAttribute("data-share")) {
				var str = gerarLinkDeCompartilhamento(palestrante.nome);

				var a = _("aLinkPalestrante");
				a.setAttribute("href", str);
				a.textContent = str;

				a = _("btnLinkPalestrante");
				a.setAttribute("data-clipboard-text", str);

				$("#modalLinkPalestrante").modal({
					backdrop: "static",
					keyboard: true
				});
			} else if (this.getAttribute("data-certificado")) {
				Notification.wait();

				JsonWebApi.get("<%- root %>/api/palestrante/gerarLinkCertificado/" + palestrante.id, function (response) {
					if (response.success) {
						Notification.hide();

						window.open(response.value);
					} else {
						Notification.error("Algo saiu errado! Por favor, tente novamente mais tarde " + emoji.sad);
					}
				});
			} else {
				resetForm("#formAlterarPalestrante");

				$("#txtPalestranteNome").val(palestrante.nome);
				$("#txtPalestranteNomeCurto").val(palestrante.nome_curto);
				$("#txtPalestranteEmail").val(palestrante.email);
				$("#cbPalestranteOculto").val(palestrante.oculto);
				$("#cbPalestranteConfirmado").val(palestrante.confirmado);
				$("#txtPalestrantePrioridade").val(palestrante.prioridade);
				$("#txtPalestranteCargo").val(palestrante.cargo);
				$("#txtPalestranteUrlSite").val(palestrante.url_site);
				$("#txtPalestranteUrlTwitter").val(palestrante.url_twitter);
				$("#txtPalestranteUrlFacebook").val(palestrante.url_facebook);
				$("#txtPalestranteUrlLinkedIn").val(palestrante.url_linkedin);
				$("#txtPalestranteBio").val(palestrante.bio);
				$("#txtPalestranteBioCurta").val(palestrante.bio_curta);

				$("#lblAlterarPalestrante").text("Salvar Alterações");

				imagemTwitter = null;
				$("#lblPalestranteImagemTwitter").hide();

				$("#modalAlterarPalestrante").modal({
					backdrop: "static",
					keyboard: true
				});
			}
		});

		$("#formAlterarPalestrante").validate({
			rules: {
				txtPalestranteNome: {
					required: true,
					maxlength: 100
				},
				txtPalestranteNomeCurto: {
					maxlength: 45
				},
				txtPalestranteEmail: {
					required: true,
					email: true,
					maxlength: 100
				},
				cbPalestranteOculto: {
					required: true
				},
				cbPalestranteConfirmado: {
					required: true
				},
				txtPalestrantePrioridade: {
					number: true,
					min: -100,
					max: 100
				},
				cbPalestranteEmpresa: {
					required: true,
				},
				txtPalestranteCargo: {
					maxlength: 45
				},
				txtPalestranteUrlSite: {
					url: true,
					maxlength: 100
				},
				txtPalestranteUrlTwitter: {
					url: true,
					maxlength: 100
				},
				txtPalestranteUrlFacebook: {
					url: true,
					maxlength: 100
				},
				txtPalestranteUrlLinkedIn: {
					url: true,
					maxlength: 100
				},
				txtPalestranteBio: {
					maxlength: 1000
				},
				txtPalestranteBioCurta: {
					maxlength: 200
				},
				txtPalestranteImagem: {
					suporteArquivoAvancado: true,
					tamanhoArquivoMinimoBytes: 128,
					//tamanhoArquivoMaximoKiB: 512,
					extensaoArquivo: [".png", ".jpg", ".jpeg"]
				}
			},
			submitHandler: function (form) {
				if ($.active || JsonWebApi.active || preparandoImagem)
					return;

				var palestrante, p = {
					idevento: idevento,
					idempresa: parseInt($("#cbPalestranteEmpresa").val()),
					nome_empresa: trim($("#cbPalestranteEmpresa option:selected").text()).normalize(),
					nome: trim($("#txtPalestranteNome").val()).normalize(),
					nome_curto: trim($("#txtPalestranteNomeCurto").val()).normalize(),
					email: trim($("#txtPalestranteEmail").val()).normalize().toUpperCase(),
					oculto: parseInt($("#cbPalestranteOculto").val()),
					confirmado: parseInt($("#cbPalestranteConfirmado").val()),
					prioridade: (parseInt($("#txtPalestrantePrioridade").val()) || 0),
					cargo: trim($("#txtPalestranteCargo").val()).normalize(),
					url_site: trim($("#txtPalestranteUrlSite").val()).normalize(),
					url_twitter: trim($("#txtPalestranteUrlTwitter").val()).normalize(),
					url_facebook: trim($("#txtPalestranteUrlFacebook").val()).normalize(),
					url_linkedin: trim($("#txtPalestranteUrlLinkedIn").val()).normalize(),
					bio: trim($("#txtPalestranteBio").val()).normalize(),
					bio_curta: trim($("#txtPalestranteBioCurta").val()).normalize(),
					versao: 0
				};

				if (!p.nome_curto)
					p.nome_curto = (p.nome.length <= 45 ? p.nome : p.nome.substr(0, 45));

				Notification.wait();

				var formData = new FormData(), imagemVazia = false;
				formData.append("idevento", p.idevento);
				formData.append("idempresa", p.idempresa);
				formData.append("nome", p.nome);
				formData.append("nome_curto", p.nome_curto);
				formData.append("email", p.email);
				formData.append("oculto", p.oculto);
				formData.append("confirmado", p.confirmado);
				formData.append("prioridade", p.prioridade);
				formData.append("cargo", p.cargo);
				formData.append("url_site", p.url_site);
				formData.append("url_twitter", p.url_twitter);
				formData.append("url_facebook", p.url_facebook);
				formData.append("url_linkedin", p.url_linkedin);
				formData.append("bio", p.bio);
				formData.append("bio_curta", p.bio_curta);

				function terminar(atualizarVersao) {
					preparandoImagem = false;

					if (urlImagemTwitter) {
						URL.revokeObjectURL(urlImagemTwitter);
						urlImagemTwitter = null;
					}

					if (trClicada && (palestrante = tabela.row(trClicada).data())) {
						p.id = palestrante.id;
						p.versao = (atualizarVersao ? palestrante.versao + 1 : palestrante.versao);
						formData.append("id", p.id);
						formData.append("versao", p.versao);

						JsonWebApi.postFormData("<%- root %>/api/palestrante/alterar", formData, function (response) {
							if (response.success) {
								$("#modalAlterarPalestrante").modal("hide");
								palestrante.idempresa = p.idempresa;
								palestrante.nome_empresa = p.nome_empresa;
								palestrante.nome = p.nome;
								palestrante.nome_curto = p.nome_curto;
								palestrante.email = p.email;
								palestrante.oculto = p.oculto;
								palestrante.confirmado = p.confirmado;
								palestrante.prioridade = p.prioridade;
								palestrante.cargo = p.cargo;
								palestrante.url_site = p.url_site;
								palestrante.url_twitter = p.url_twitter;
								palestrante.url_facebook = p.url_facebook;
								palestrante.url_linkedin = p.url_linkedin;
								palestrante.bio = p.bio;
								palestrante.bio_curta = p.bio_curta;
								palestrante.versao = p.versao;
								eventoPalestrantes.sort(comparadorNome);
								Notification.success("Palestrante alterado com sucesso! " + emoji.happy);
								tabela.row(trClicada).invalidate().draw();
								trClicada = null;
							} else {
								Notification.error(response.value, true);
							}
						});
					} else {
						formData.append("versao", p.versao);

						JsonWebApi.postFormData("<%- root %>/api/palestrante/criar", formData, function (response) {
							if (response.success) {
								resetForm("#formAlterarPalestrante");
								setCbSearch(_("cbPalestranteEmpresa"), idempresapadrao.toString());
								$("#lblPalestranteImagemTwitter").hide();
								p.id = parseInt(response.value);
								eventoPalestrantesPorId[p.id] = p;
								eventoPalestrantes.push(p);
								eventoPalestrantes.sort(comparadorNome);
								Notification.success("Palestrante criado com sucesso! " + emoji.happy);
								tabela.row.add(p).draw();
							} else {
								Notification.error(response.value, true);
							}
							trClicada = null;
						});
					}
				}

				function erroImagem() {
					preparandoImagem = false;
					Notification.error("Ocorreu um erro durante o processamento da imagem " + emoji.sad, true);
				}

				function prepararImagem(arquivo) {
					preparandoImagem = true;

					function terminarImagem(src) {
						var image = new Image();
						image.onload = function () {
							var w = image.width, h = image.height, cw = w, ch = h, bordas = false;

							// Inicialmente ajusta o tamanho do canvas com base
							// no aspect ratio desejado, caso exista algum
							var aspectratiopalestrante = $("#aspectratiopalestrantevalido").val();
							if (aspectratiopalestrante) {
								var rw = aspectratiopalestrante.split(":"), rh;
								if (rw.length === 2 &&
									!isNaN(rh = parseInt(rw[1])) &&
									!isNaN(rw = parseInt(rw[0])) &&
									rh > 0 &&
									rw > 0) {
									if (Math.abs((cw / ch) - (rw / rh)) > 0.07) {
										bordas = true;
										// Preserva a maior dimensão
										if ((cw / rw) >= (ch / rh))
											ch = (cw * rh) / rw;
										else
											cw = (ch * rw) / rh;
									}
								}
							}

							// Não podemos ter imagens muito grandes
							if (cw >= ch) {
								if (cw > 600) {
									ch = ch * (600 / cw);
									cw = 600;
								}
							} else {
								if (ch > 600) {
									cw = cw * (600 / ch);
									ch = 600;
								}
							}

							cw = (cw + 0.5) | 0;
							ch = (ch + 0.5) | 0;

							var canvas = document.createElement("canvas");
							canvas.width = cw;
							canvas.height = ch;

							var context = canvas.getContext("2d", { alpha: imagemVazia });

							try {
								if (("imageSmoothingEnabled" in context))
									context.imageSmoothingEnabled = true;
								if (("imageSmoothingQuality" in context))
									context.imageSmoothingQuality = "high";
							} catch (ex) {
								// Apenas ignora...
							}

							if (bordas) {
								// Preenche o fundo de preto (as novas bordas da imagem)
								if (imagemVazia) {
									context.clearRect(0, 0, cw, ch);
								} else {
									context.fillStyle = "#000";
									context.fillRect(0, 0, cw, ch);
								}

								if ($("#cbPalestranteImagemModo").val()) {
									// Redimensiona e centraliza a imagem dentro do canvas
									if ((cw / ch) > (w / h)) {
										// Bordas verticais nas laterais
										w = (((w * ch) / h) + 0.5) | 0;
										h = ch;
									} else {
										// Bordas horizontais acima e abaixo
										h = (((h * cw) / w) + 0.5) | 0;
										w = cw;
									}
								} else {
									// Amplia cortando o excesso
									if ((cw / ch) > (w / h)) {
										// Corta a parte superior e inferior da imagem
										h = (((h * cw) / w) + 0.5) | 0;
										w = cw;
									} else {
										// Corta as laterais da imagem
										w = (((w * ch) / h) + 0.5) | 0;
										h = ch;
									}
								}

								context.drawImage(image, 0, 0, image.width, image.height, (cw - w) >> 1, (ch - h) >> 1, w, h);
							} else {
								// Apenas redimensiona (não precisa de bordas)
								context.drawImage(image, 0, 0, cw, ch);
							}

							var mime = (imagemVazia ? "image/png" : "image/jpeg"); //(!urlImagemTwitter && endsWith(arquivo.name.toLowerCase(), ".png")) ? "image/png" : "image/jpeg";

							if (!HTMLCanvasElement.prototype.toBlob) {
								var data = canvas.toDataURL(mime, 0.89);

								// https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Drawing_DOM_objects_into_a_canvas#JavaScript
								var binStr = atob(data.split(",")[1]),
									len = binStr.length,
									arr = new Uint8Array(len);
								for (var i = 0; i < len; i++)
									arr[i] = binStr.charCodeAt(i);

								formData.append("imagem", new Blob([arr], { type: mime }));
								terminar(true);
							} else {
								canvas.toBlob(function (blob) {
									formData.append("imagem", blob);
									terminar(true);
								}, mime, 0.89);
							}
						};
						image.onerror = erroImagem;
						image.src = src;
					}

					if (imagemTwitter) {
						if (urlImagemTwitter)
							URL.revokeObjectURL(urlImagemTwitter);
						urlImagemTwitter = URL.createObjectURL(new Blob([imagemTwitter], { type: (imagemVazia ? "image/png" : "image/jpeg") }));
						imagemTwitter = null;
						terminarImagem(urlImagemTwitter);
					} else {
						var reader = new FileReader();
						reader.onload = function () {
							terminarImagem(reader.result);
						};
						reader.onerror = erroImagem;
						reader.readAsDataURL(arquivo);
					}
				}

				var txtPalestranteImagem = _("txtPalestranteImagem");
				// Ao criar um palestrante, se nenhuma imagem foi fornecida, coloca uma imagem em branco
				if (!trClicada && !txtPalestranteImagem.value) {
					imagemVazia = true;
					imagemTwitter = gerarPNGVazio();
				}
				if (imagemTwitter || (txtPalestranteImagem.files && txtPalestranteImagem.files[0]))
					prepararImagem(imagemTwitter ? null : txtPalestranteImagem.files[0]);
				else
					terminar(false);
			}
		});

		window.criarPalestrante = function () {
			if ($.active || JsonWebApi.active)
				return;

			trClicada = null;

			resetForm("#formAlterarPalestrante");

			$("#lblAlterarPalestrante").text("Criar Palestrante");

			imagemTwitter = null;
			$("#lblPalestranteImagemTwitter").hide();

			$("#modalAlterarPalestrante").modal({
				backdrop: "static",
				keyboard: true
			});
		};

		window.excluirPalestrante = function () {
			if ($.active || JsonWebApi.active || !trClicada)
				return;

			$("#modalExcluirPalestrante").modal("hide");

			var palestrante = tabela.row(trClicada).data();

			Notification.wait();

			JsonWebApi.get("<%- root %>/api/palestrante/excluir", function (response) {
				if (response.success) {
					delete eventoPalestrantesPorId[palestrante.id];
					for (var i = eventoPalestrantes.length - 1; i >= 0; i--) {
						if (eventoPalestrantes[i].id === palestrante.id) {
							eventoPalestrantes.splice(i, 1);
							break;
						}
					}
					Notification.success("Palestrante excluído com sucesso! " + emoji.happy);
					tabela.row(trClicada).remove().draw();
				} else {
					Notification.error(response.value, true);
				}
				trClicada = null;
			}, "id", palestrante.id);
		};

		function exibirErroTwitter(mensagem) {
			preparandoImagem = false;
			Notification.error((mensagem || "Algo saiu errado! Por favor, tente novamente mais tarde") + " " + emoji.sad, true);
		}

		window.downloadTwitter = function () {
			if ($.active || JsonWebApi.active || preparandoImagem || imagemTwitter)
				return;

			if (!("URL" in window) || !("createObjectURL" in window.URL)) {
				BlobDownloader.alertNotSupported();
				return;
			}

			var url = trim($("#txtPalestranteUrlTwitter").val());
			if (url.indexOf("http://") && url.indexOf("https://")) {
				Notification.error("URL do Twitter inválida " + emoji.sad, true);
				return;
			}

			imagemTwitter = null;
			$("#lblPalestranteImagemTwitter").hide();

			Notification.wait();

			preparandoImagem = true;

			try {
				var xhr = new XMLHttpRequest();
				xhr.open("GET", "/api/palestrante/obterImagemTwitter?url=" + encodeURIComponent(url), true);
				xhr.responseType = "arraybuffer";

				xhr.onerror = function () {
					if (xhr.status >= 500)
						exibirErroTwitter();
					else
						exibirErroTwitter("Imagem do Twitter não disponível para o usuário");
				};

				xhr.onload = function () {
					preparandoImagem = false;
					imagemTwitter = xhr.response;
					$("#lblPalestranteImagemTwitter").show();
					Notification.success("Imagem obtida com sucesso! " + emoji.happy);
				};

				xhr.send();
			} catch (ex) {
				exibirErroTwitter();
			}
		};

		window.mostrarGridAceite = function () {
			if ($.active || JsonWebApi.active)
				return;

			Notification.wait();

			JsonWebApi.get("<%- root %>/api/palestrante/listarSessoesEAceitesGeral", function (response) {
				if (response.success) {

					var i, j,
						ideventopalestrante, palestrante, sessao,
						partes, maiorEmail, data, dataMaiorEmail,
						temSessao, faltaEmail, aceiteCompleto,
						placeholder = { versao: 0 },
						html = '<div class="text-center mb-3"><button type="button" class="btn btn-primary" onclick="enviarEmailsFaltantes()"><i class="fa fa-envelope-o"></i>Enviar E-mails Faltantes</button></div><div class="table-responsive"><table id="gridAceite" class="table table-striped table-hover mb-0"><thead><tr><th class="col-min" data-orderable="false" data-searchable="false"></th><th class="col-min" data-orderable="false" data-searchable="false"></th><th class="left">Palestrante</th><th class="col-min left">Sessões sem E-mail</th><th class="col-min left">Aceite Completo</th><th class="col-min text-right" data-type="customdateint">Data do Último E-mail</th></tr></thead><tbody>'

					for (i = 0; i < eventoPalestrantes.length; i++) {
						palestrante = eventoPalestrantes[i];
						ideventopalestrante = palestrante.id;

						maiorEmail = null;
						dataMaiorEmail = 0;
						temSessao = false;
						faltaEmail = false;
						aceiteCompleto = true;

						for (j = response.value.length - 1; j >= 0; j--) {
							sessao = response.value[j];
							if (sessao.ideventopalestrante !== ideventopalestrante)
								continue;

							temSessao = true;

							if (!sessao.email) {
								faltaEmail = true;
							} else {
								partes = sessao.email.split("/");
								data = (parseInt(partes[2]) * 10000) + (parseInt(partes[1]) * 100) + parseInt(partes[0]);
								if (dataMaiorEmail < data) {
									dataMaiorEmail = data;
									maiorEmail = sessao.email;
								}
							}

							if (!sessao.aceite)
								aceiteCompleto = false;
						}

						if (!temSessao)
							continue;

						html += '<tr data-ideventopalestrante="' + ideventopalestrante + '">';
						html += '<td><button type="button" onclick="enviarEmail(this.parentNode.parentNode, true)" class="btn btn-outline btn-primary"><i class="fa fa-envelope-o"></i>Reenviar E-mail</button></td>';
						html += '<td class="col-min"><img alt="Imagem da Palestrante" class="palestrante-img" src="' + caminhoAbsolutoPastaExterno + '/' + ideventopalestrante + '.' + extensaoImagem + '?v=' + (eventoPalestrantesPorId[ideventopalestrante] || placeholder).versao + '" /></td>';
						html += '<td>' + encode(palestrante.nome) + '</td>';
						html += (faltaEmail ? '<td><span class="col-h">SIM</span></td>' : '<td>NÃO</td>');
						html += (aceiteCompleto ? '<td>SIM</td>' : '<td><span class="col-h">NÃO</span></td>');
						html += (maiorEmail ? '<td class="text-right">' + maiorEmail + '</td>' : '<td class="text-right"></td>');
						html += '</tr>';
					}

					html += '</tbody></table></div>';

					$("#modalGridAceiteBody").html(html);

					prepareDataTable("gridAceite", {
						order: [[2, "asc"]],
						deferRender: false,
						export: { title: "Aceites" }
					});

					Notification.hide();

					$("#modalGridAceite").modal({
						backdrop: "static",
						keyboard: true
					});
				} else {
					Notification.error("Algo saiu errado! Por favor, tente novamente mais tarde " + emoji.sad, true);
				}
			});
		};

		window.enviarEmailsFaltantes = function () {
			if ($.active || JsonWebApi.active)
				return;

			var i = -1, gridAceite = $("#gridAceite").DataTable(), rows = gridAceite.rows().nodes();

			function enviarProximo(erro) {
				if (erro) {
					Notification.error(erro, true);
					return;
				}

				i++;
				if (i >= rows.length) {
					Notification.success("E-mails enviados com sucesso! " + emoji.happy);
					return;
				}

				Notification.wait("Enviando e-mail " + (i + 1) + " de " + rows.length + ". Por favor, aguarde...");

				if (!enviarEmail(rows[i], false, enviarProximo, gridAceite))
					setTimeout(function () { enviarProximo(null); }, 10);
			}

			Notification.wait();

			enviarProximo(null);
		};

		window.enviarEmail = function (row, forcar, callback, gridAceite) {
			if (forcar) {
				if ($.active || JsonWebApi.active)
					return false;

				Notification.wait();
			} else {
				if (gridAceite.row(row).data()[3] == "NÃO")
					return false;
			}

			JsonWebApi.get("<%- root %>/api/palestrante/enviarEmailLinkExterno/" + row.getAttribute("data-ideventopalestrante"), function (response) {
				if (response.success) {
					concluirRow(row, response.value, gridAceite);
					if (callback)
						callback(null);
					else
						Notification.success("E-mail enviado com sucesso! " + emoji.happy);
				} else {
					var msg = "Algo saiu errado! Por favor, tente novamente mais tarde " + emoji.sad;
					if (callback)
						callback(msg);
					else
						Notification.error(msg, true);
				}
			});

			return true;
		};

		function concluirRow(row, data, gridAceite) {
			if (!gridAceite)
				gridAceite = $("#gridAceite").DataTable();
			var $row = gridAceite.row(row), dados = $row.data();
			dados[3] = "NÃO";
			dados[5] = data;
			$row.data(dados).invalidate().draw();
		}

		window.gerarLinkExterno = function (id) {

		};
	});

	//]]>
</script>
