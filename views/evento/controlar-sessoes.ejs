
<div class="row">
	<div class="col-lg-12">
		<div class="panel panel-default">
			<div class="panel-body dataTable_wrapper">
				<div class="col-xs-space-bottom">
					<button class="btn btn-primary" type="button" onclick="criarSessao()"><i class="fa fa-plus"></i>Criar Sessão...</button>
				</div>
				<div class="col-xs-space-bottom text-center">
					<button class="btn btn-primary btn-outline" type="button" onclick="mostrarGridData()"><i class="fa fa-table"></i>Exibir Grade...</button>
					<button class="btn btn-primary btn-outline" type="button" onclick="mostrarGridInscritosGeral()"><i class="fa fa-users"></i>Exibir Participantes e Presenças...</button>
					<button class="btn btn-primary btn-outline" type="button" onclick="mostrarGridAvaliacoesEMedias()"><i class="fa fa-thumbs-o-up"></i>Exibir Avaliações e Comentários...</button>
					<button class="btn btn-primary btn-outline" type="button" onclick="mostrarGridPalestrantesGeral()"><i class="fa fa-microphone"></i>Exibir Palestrantes...</button>
				</div>
				<div class="col-xs-space-bottom text-center">
					<button class="btn btn-primary btn-outline" type="button" onclick="listarInscricoesEPresencas()"><i class="fa fa-refresh"></i>Atualizar Inscrições e Presenças...</button>
					<button class="btn btn-primary btn-outline" type="button" onclick="listarAvaliacoesEMedias()"><i class="fa fa-refresh"></i>Atualizar Avaliações e Médias...</button>
				</div>
				<div class="col-xs-space-bottom text-center"><b id="lblInscricoesEPresencas"></b></div>
				<table class="table table-striped table-hover" id="tabela-sessoes"></table>
			</div>
		</div>
	</div>
</div>

<div class="modal fade" tabindex="-1" role="dialog" id="modalAlterarSessao">
	<div class="modal-dialog modal-flex" role="document">
		<form class="modal-content" id="formAlterarSessao" method="post">
			<div class="modal-header">
				<button type="button" class="close" data-dismiss="modal" aria-label="Fechar"><span aria-hidden="true">&times;</span></button>
				<h4 class="modal-title">Sessão</h4>
			</div>
			<div class="modal-body">
				<div class="row">
					<div class="col-xs-6 col-sm-4">
						<div class="form-group">
							<label for="cbSessaoData">Data</label>
							<select id="cbSessaoData" name="cbSessaoData" class="form-control upper" size="1"><option value="">SELECIONE...</option></select>
						</div>
					</div>
					<div class="col-xs-6 col-sm-4">
						<div class="form-group">
							<label for="cbSessaoHorario">Horário</label>
							<select id="cbSessaoHorario" name="cbSessaoHorario" class="form-control upper" size="1"><option value="">SELECIONE...</option></select>
						</div>
					</div>
					<div class="col-sm-4">
						<div class="form-group">
							<label for="cbSessaoLocal">Local</label>
							<select id="cbSessaoLocal" name="cbSessaoLocal" class="form-control upper" size="1"><option value="">SELECIONE...</option></select>
						</div>
					</div>
				</div>
				<div class="form-group" id="divSessaoUrlRemota" style="display: none;">
					<label for="txtSessaoUrlRemota">URL da Sessão Remota <small><i>(http://... ou https://...)</i></small></label>
					<input id="txtSessaoUrlRemota" name="txtSessaoUrlRemota" type="url" class="form-control" maxlength="100" spellcheck="false" />
				</div>
				<div class="form-group">
					<label for="txtSessaoNome">Nome</label>
					<input id="txtSessaoNome" name="txtSessaoNome" type="text" class="form-control" maxlength="100" />
				</div>
				<div class="row">
					<div class="col-sm-3">
						<div class="form-group">
							<label for="txtSessaoNomeCurto">Nome Curto</label>
							<input id="txtSessaoNomeCurto" name="txtSessaoNomeCurto" type="text" class="form-control" maxlength="45" />
						</div>
					</div>
					<div class="col-sm-3">
						<div class="form-group">
							<label for="cbSessaoOculta">Oculta</label>
							<select id="cbSessaoOculta" name="cbSessaoOculta" class="form-control upper" size="1"><option value="0">NÃO</option><option value="1">SIM</option></select>
						</div>
					</div>
					<div class="col-sm-3">
						<div class="form-group">
							<label for="cbSessaoPermiteInscricao">Permite Inscrição</label>
							<select id="cbSessaoPermiteInscricao" name="cbSessaoPermiteInscricao" class="form-control upper" size="1"><option value="1" selected="selected">SIM</option><option value="0">NÃO</option></select>
						</div>
					</div>
					<div class="col-sm-3">
						<div class="form-group">
							<label for="cbSessaoCurso">Curso Âncora</label>
							<select id="cbSessaoCurso" name="cbSessaoCurso" class="form-control upper" size="1"><option value="">SELECIONE...</option></select>
						</div>
					</div>
				</div>
				<div class="form-group">
					<label for="txtSessaoDescricao">Descrição</label>
					<textarea id="txtSessaoDescricao" name="txtSessaoDescricao" class="form-control" maxlength="200" rows="4"></textarea>
				</div>
				<div class="row">
					<div class="col-sm-4">
						<div class="form-group">
							<label for="cbSessaoFormato">Formato</label>
							<select id="cbSessaoFormato" name="cbSessaoFormato" class="form-control upper" size="1"><option value="">SELECIONE...</option></select>
						</div>
					</div>
					<div class="col-sm-4">
						<div class="form-group">
							<label for="cbSessaoTipo">Tipo de Sessão</label>
							<select id="cbSessaoTipo" name="cbSessaoTipo" class="form-control upper" size="1"><option value="">SELECIONE...</option></select>
						</div>
					</div>
					<div class="col-sm-4">
						<div class="form-group">
							<label for="cbSessaoVertical">Vertical</label>
							<select id="cbSessaoVertical" name="cbSessaoVertical" class="form-control upper" size="1"><option value="">SELECIONE...</option></select>
						</div>
					</div>
				</div>
				<div class="form-group">
					<label for="txtSessaoPublicoAlvo">Público-Alvo</label>
					<input id="txtSessaoPublicoAlvo" name="txtSessaoPublicoAlvo" type="text" class="form-control" maxlength="100" />
				</div>
				<div class="form-group">
					<label for="txtSessaoTags">Tags <small>(Separadas por vírgula)</small></label>
					<input id="txtSessaoTags" name="txtSessaoTags" type="text" class="form-control upper" maxlength="100" />
				</div>
				<div class="panel panel-default no-margin-bottom">
					<div class="panel-heading">
						Palestrantes
					</div>
					<div class="panel-body">
						<div class="row">
							<div class="col-sm-3 col-sm-space-bottom">
								<button class="btn btn-primary btn-block" type="button" onclick="criarEAdicionarNovoPalestrante()"><i class="fa fa-plus"></i>Criar Novo</button>
							</div>
							<div class="col-sm-3 col-sm-space-bottom">
								<input id="txtSessaoPalestranteNovoNome" name="txtSessaoPalestranteNovoNome" class="form-control" type="text" maxlength="100" spellcheck="false" placeholder="NOME" />
							</div>
							<div class="col-sm-3 col-sm-space-bottom">
								<input id="txtSessaoPalestranteNovoEmail" name="txtSessaoPalestranteNovoEmail" class="form-control upper" type="email" maxlength="100" spellcheck="false" placeholder="E-MAIL" />
							</div>
							<div class="col-sm-3">
								<input id="txtSessaoPalestranteNovoEmpresa" name="txtSessaoPalestranteNovoEmpresa" class="form-control" type="text" maxlength="100" spellcheck="false" placeholder="EMPRESA" />
							</div>
						</div>
						<hr />
						<div class="row">
							<div class="col-sm-4 col-sm-space-bottom">
								<button class="btn btn-primary btn-block" type="button" onclick="adicionarPalestrante()"><i class="fa fa-plus"></i>Adicionar</button>
							</div>
							<div class="col-sm-8">
								<select id="cbSessaoPalestrante" name="cbSessaoPalestrante" class="form-control" size="1"><option value="">SELECIONE...</option></select>
							</div>
						</div>
						<div class="table-responsive">
							<table id="tabelaSessaoPalestrante" class="table table-striped table-hover no-margin-bottom" style="display: none;">
								<thead>
									<tr>
										<th></th>
										<th></th>
										<th></th>
										<th class="col-50">Nome</th>
										<th class="col-50">E-mail</th>
										<th class="col-25">Empresa</th>
										<th class="col-min text-right">Aceite</th>
									</tr>
								</thead>
								<tbody id="tabelaSessaoPalestranteBody" class="content-section"></tbody>
							</table>
						</div>
					</div>
				</div>
			</div>
			<div class="modal-footer">
				<button type="submit" class="btn btn-primary"><i class="fa fa-check"></i><span id="lblAlterarSessao">Criar Sessão</span></button>
				<button type="button" class="btn btn-outline btn-default" data-dismiss="modal"><i class="fa fa-times"></i>Cancelar</button>
			</div>
		</form>
	</div>
</div>

<div class="modal fade" tabindex="-1" role="dialog" id="modalExcluirSessao">
	<div class="modal-dialog" role="document">
		<div class="modal-content">
			<div class="modal-header">
				<button type="button" class="close" data-dismiss="modal" aria-label="Fechar"><span aria-hidden="true">&times;</span></button>
				<h4 class="modal-title">Oops...</h4>
			</div>
			<div class="modal-body">
				<p>
					Tem certeza que deseja excluir a sessão <span id="lblExcluirSessao"></span>? Esta operação <b class="col-h">NÃO</b> pode ser desfeita!
					<br />
					<b class="col-h">Se houverem inscritos na sessão, suas inscrições também serão excluídas!</b>
				</p>
				<p>
					Para confirmar a exclusão, por favor, digite abaixo o nome da sessão conforme exibido acima:
				</p>
				<div class="form-group">
					<label for="txtModalExcluirSessao">Nome da sessão</label>
					<input type="text" class="form-control" spellcheck="false" autocomplete="off" id="txtModalExcluirSessao" />
				</div>
			</div>
			<div class="modal-footer">
				<button type="button" class="btn btn-danger" onclick="excluirSessao()"><i class="fa fa-check"></i>Excluir</button>
				<button type="button" class="btn btn-outline btn-default" data-dismiss="modal"><i class="fa fa-times"></i>Cancelar</button>
			</div>
		</div>
	</div>
</div>

<div class="modal fade" tabindex="-1" role="dialog" id="modalLinkSessao">
	<div class="modal-dialog" role="document">
		<div class="modal-content">
			<div class="modal-header">
				<button type="button" class="close" data-dismiss="modal" aria-label="Fechar"><span aria-hidden="true">&times;</span></button>
				<h4 class="modal-title">Link</h4>
			</div>
			<div class="modal-body">
				<div class="col-xs-space-bottom"><button id="btnLinkSessao" type="button" class="btn btn-primary"><i class="fa fa-copy"></i>Copiar</button></div>
				<a id="aLinkSessao" href="#" target="_blank" style="word-break: break-all;"></a>
			</div>
			<div class="modal-footer">
				<button type="button" class="btn btn-outline btn-default" data-dismiss="modal"><i class="fa fa-times"></i>Fechar</button>
			</div>
		</div>
	</div>
</div>

<div class="modal fade" tabindex="-1" role="dialog" id="modalGridData">
	<div class="modal-dialog modal-flex" role="document">
		<div class="modal-content">
			<div class="modal-header">
				<button type="button" class="close" data-dismiss="modal" aria-label="Fechar"><span aria-hidden="true">&times;</span></button>
				<h4 class="modal-title" id="modalGridDataTitle">Grade de Alocações</h4>
			</div>
			<div class="modal-body" id="modalGridDataBody"></div>
			<div class="modal-footer">
				<button type="button" class="btn btn-outline btn-default" data-dismiss="modal"><i class="fa fa-times"></i>Fechar</button>
			</div>
		</div>
	</div>
</div>

<script type="text/javascript">
	//<![CDATA[
	"use strict";

	// Como não podemos utilizar o contentFor("scripts"), porque o alterar.ejs
	// será utilizado como include para outra página, precisamos executar a
	// função apenas quando o documento estiver ok
	$(function () {
		var idevento = <%- idevento %>;
		var extensaoImagem = "<%- extensaoImagem %>";
		carregarDatas(<%- datas %>);
		carregarEmpresas(<%- empresas %>);
		carregarHorarios(<%- horarios %>);
		carregarLocais(<%- eventoLocais %>, <%- locais %>);
		carregarPalestrantes(<%- palestrantes %>);
		carregarCursos(<%- cursos %>);
		carregarFormatos(<%- formatos %>);
		carregarTipoSessoes(<%- tipoSessoes %>);
		carregarVerticais(<%- verticais %>);
		var totalIP = carregarSessoes(<%- sessoes %>, <%- presencas %>);

		var tabela = prepareDataTable("tabela-sessoes", {
			order: [],
			deferRender: true,
			columns: [
				{ title: "", "class": "col-min", searchable: false, orderable: false, data: "id", render: function (v, type, row) { return "<button title=\"Editar\" type=\"button\" class=\"btn btn-outline btn-primary\"><i class=\"fa fa-nomargin fa-edit\"></i></button> <button title=\"Clonar\" type=\"button\" data-clonar=\"1\" class=\"btn btn-outline btn-default\"><i class=\"fa fa-nomargin fa-copy\"></i></button> <button title=\"Link de Compartilhamento\" type=\"button\" data-share=\"1\" class=\"btn btn-outline btn-default\"><i class=\"fa fa-nomargin fa-share-alt\"></i></button> <button title=\"Excluir\" type=\"button\" data-excluir=\"1\" class=\"btn btn-outline btn-danger\"><i class=\"fa fa-nomargin fa-times\"></i></button>"; } },
				{ title: "Nome", render: encode, data: "nome" },
				{
					title: "Palestrantes", data: function (row, type, set, meta) {
						var i, nomes = "", p, n, ids = row.idspalestrante;
						if (ids && eventoPalestrantesPorId) {
							for (i = 0; i < ids.length; i++) {
								p = eventoPalestrantesPorId[ids[i]];
								if (!p || (!(n = p.nome_curto) && !(n = p.nome)))
									continue;
								if (nomes)
									nomes += ", ";
								nomes += encode(n);
							}
						}
						return nomes;
					}
				},
				{ title: "Oculta", "class": "col-min", data: function (row, type, set, meta) { return (row.oculta ? "<span class=\"col-h\">SIM</span>" : "NÃO"); } },
				{ title: "Lotada", "class": "col-min text-center", data: function (row, type, set, meta) { var local = eventoLocaisPorIdEventoLocal[row.ideventolocal]; return ((local && row.inscritos >= local.capacidade) ? "<span class=\"col-h\">SIM</span>" : "NÃO"); } },
				{ title: "Inscrições", "class": "col-min text-right", "type": "number", data: "inscritos" },
				{ title: "Presenças", "class": "col-min text-right", "type": "number", data: "presentes" },
				{ title: "Avaliações", "class": "col-min text-right", "type": "number", data: "avaliacoes" },
				{ title: "Nota Média", "class": "text-right", "type": "number", data: "media" },
				{ title: "Capacidade Real", "class": "text-right", "type": "number", data: function (row, type, set, meta) { var local = eventoLocaisPorIdEventoLocal[row.ideventolocal]; return (local ? local.capacidade_real : 0); } },
				{ title: "Capacidade Alocada", "class": "text-right", "type": "number", data: function (row, type, set, meta) { var local = eventoLocaisPorIdEventoLocal[row.ideventolocal]; return (local ? local.capacidade : 0); } },
				{ title: "Data", "class": "col-min text-right", "type": "customdateint", data: "data" },
				{ title: "Início", "class": "col-min text-right", "type": "customtime", render: encode, data: "inicio" },
				{ title: "Término", "class": "col-min text-right", "type": "customtime", render: encode, data: "termino" },
				{ title: "Local", render: encode, data: "nome_local" },
				{ title: "Unidade", render: encode, data: "sigla_unidade" },
				{ title: "URL Remota", data: function (row, type, set, meta) { return (row.url_remota ? ('<a target="_blank" class="link-curto" href="' + row.url_remota + '">' + row.url_remota + '</a>') : ''); } },
				{ title: "Curso Âncora", render: encode, data: "nome_curso" },
				{ title: "Formato", render: encode, data: "nome_formato" },
				{ title: "Tipo", render: encode, data: "nome_tipo" },
				{ title: "Vertical", render: encode, data: "nome_vertical" },
				{ title: "Público-Alvo", render: encode, data: "publico_alvo" },
				{ title: "Tags", render: encode, data: "tags" },
				{ title: "Link de Compartilhamento", data: function (row, type, set, meta) { var str = gerarLinkDeCompartilhamento(row.nome); return '<a target="_blank" class="link-curto" href="' + str + '">' + str + '</a>'; } },
			],
			data: eventoSessoes,
			export: { title: "Sessões do Evento" }
		});

		window.listarInscricoesEPresencas = function () {
			if ($.active || JsonWebApi.active)
				return;

			Notification.wait();

			JsonWebApi.get("/api/evento/listarInscricoesEPresencas", function (response) {
				if (response.success) {
					Notification.success("Informações atualizadas com sucesso! \uD83D\uDE04");

					atualizarInscricoesEPresencas(response.value);

					tabela.rows().invalidate().draw();
				} else {
					Notification.error("Algo saiu errado! Por favor, tente novamente mais tarde \uD83D\uDE22", true);
				}
			});
		};

		window.listarAvaliacoesEMedias = function () {
			if ($.active || JsonWebApi.active)
				return;

			Notification.wait();

			JsonWebApi.get("/api/evento/listarAvaliacoesEMedias", function (response) {
				if (response.success) {
					Notification.success("Informações atualizadas com sucesso! \uD83D\uDE04");

					atualizarAvaliacoesEMedias(response.value);

					tabela.rows().invalidate().draw();
				} else {
					Notification.error("Algo saiu errado! Por favor, tente novamente mais tarde \uD83D\uDE22", true);
				}
			});
		};

		window.adicionarPalestrante = function (id) {
			if ($.active || JsonWebApi.active)
				return;

			var salvar = false;
			if (!id) {
				id = parseInt($("#cbSessaoPalestrante").val());
				salvar = true;
			}

			var palestrante = eventoPalestrantesPorId[id];

			if (!palestrante || $("#tabelaSessaoPalestranteBody [data-id=" + id + "]").length)
				return;

			$("#tabelaSessaoPalestranteBody").append(
				'<tr class="ui-sortable-handle" data-id="' + id + '">' +
				'<td class="col-min content-enum"></td>' +
				'<td class="col-min"><button type="button" title="Excluir" class="btn btn-outline btn-danger" onclick="removerPalestrante(this)"><i class="fa fa-nomargin fa-trash-o"></i></button></td>' +
				'<td class="col-min"><img alt="Imagem da Palestrante" style="max-width: 100px; max-height: 75px;" src="/evt/' + idevento + '/palestrantes/' + id + '.' + extensaoImagem + '?v=' + palestrante.versao + '"></td>' +
				'<td class="col-50">' + encode(palestrante.nome) + '</td>' +
				'<td class="col-50">' + encode(palestrante.email) + '</td>' +
				'<td class="col-25">' + encode(palestrante.nome_empresa) + '</td>' +
				'<td class="col-min text-right">' + ((aceites && aceites[palestrante.id]) || "-") + "</td>" +
				'</tr>');

			$("#tabelaSessaoPalestrante").show();

			if (trClicada && salvar) {
				naoFecharModal = true;
				$("#formAlterarSessao").submit();
			}
		};

		window.removerPalestrante = function (btn) {
			if ($.active || JsonWebApi.active)
				return;

			var tr = btn.parentNode.parentNode,
				tabelaSessaoPalestranteBody = tr.parentNode;

			tabelaSessaoPalestranteBody.removeChild(tr);

			if (!tabelaSessaoPalestranteBody.childNodes.length)
				$("#tabelaSessaoPalestrante").hide();

			if (trClicada) {
				naoFecharModal = true;
				$("#formAlterarSessao").submit();
			}
		};

		var trClicada, aceites, clonar, naoFecharModal = false;

		function localInternet(ideventolocal) {
			var i, local = null;
			for (i = eventoLocais.length - 1; i >= 0; i--) {
				if (eventoLocais[i].ideventolocal === ideventolocal) {
					local = eventoLocais[i];
					break;
				}
			}
			return (local && local.idunidade === -1);
		}

		prepareCbSearch(_("cbSessaoData"));
		prepareCbSearch(_("cbSessaoHorario"));
		prepareCbSearch(_("cbSessaoLocal"));
		prepareCbSearch(_("cbSessaoCurso"));
		prepareCbSearch(_("cbSessaoFormato"));
		prepareCbSearch(_("cbSessaoTipo"));
		prepareCbSearch(_("cbSessaoVertical"));
		prepareCbSearch(_("cbSessaoPalestrante"));
		$("#tabelaSessaoPalestranteBody").sortable().disableSelection();
		_("cbSessaoLocal").onchange = function () {
			_("divSessaoUrlRemota").style.display = (localInternet(parseInt(_("cbSessaoLocal").value)) ? "" : "none");
		};
		fixUrlOnBlur(_("txtSessaoUrlRemota"));
		prepareCopyHandler(_("modalLinkSessao"), "#btnLinkSessao");

		$("#modalAlterarSessao").on("show.bs.modal", function () {
			var i, sessao = (trClicada ? tabela.row(trClicada).data() : null);
			preencherCb(_("cbSessaoData"), eventoDatas, sessao ? sessao.ideventodata : "0", function (e) { return format2(e.dia) + "/" + format2(e.mes) + "/" + e.ano; });
			preencherCb(_("cbSessaoHorario"), eventoHorarios, sessao ? sessao.ideventohorario : "0", function (e) { return e.inicio + " - " + e.termino; });
			preencherCb(_("cbSessaoLocal"), eventoLocais, sessao ? sessao.ideventolocal : "0", function (e) { return e.nome + " (" + e.sigla_unidade + ")"; }, "ideventolocal");
			$("#txtSessaoNome").val(sessao ? sessao.nome : "");
			$("#txtSessaoNomeCurto").val(sessao ? sessao.nome_curto : "");
			_("divSessaoUrlRemota").style.display = ((sessao && localInternet(sessao.ideventolocal)) ? "" : "none");
			$("#txtSessaoUrlRemota").val(sessao ? sessao.url_remota : "");
			$("#txtSessaoDescricao").val(sessao ? sessao.descricao : "");
			$("#cbSessaoOculta").val(sessao ? sessao.oculta : "0");
			$("#cbSessaoPermiteInscricao").val(sessao ? sessao.permiteinscricao : "1");
			preencherCb(_("cbSessaoCurso"), eventoCursos, sessao ? sessao.idcurso : "0");
			preencherCb(_("cbSessaoFormato"), eventoFormatos, sessao ? sessao.idformato : "0");
			preencherCb(_("cbSessaoTipo"), eventoTipoSessoes, sessao ? sessao.idtiposessao : "0");
			preencherCb(_("cbSessaoVertical"), eventoVerticais, sessao ? sessao.idvertical : "0");
			$("#txtSessaoPublicoAlvo").val(sessao ? sessao.publico_alvo : "");
			$("#txtSessaoTags").val(sessao ? sessao.tags : "");
			preencherCb(_("cbSessaoPalestrante"), eventoPalestrantes, "0");
			$("#tabelaSessaoPalestranteBody").empty();
			$("#tabelaSessaoPalestrante").hide();
			if (clonar) {
				trClicada = null;
				aceites = null;
			}
			if (sessao) {
				for (i = 0; i < sessao.idspalestrante.length; i++)
					adicionarPalestrante(sessao.idspalestrante[i]);
			}
		});

		$("#modalAlterarSessao").on("shown.bs.modal", function () {
			$("#cbSessaoData").focus();
		});

		$("#tabela-sessoes").on("click", "tbody button", function () {
			if ($.active || JsonWebApi.active)
				return;

			var sessao = tabela.row(trClicada = this.parentNode.parentNode).data();

			if (this.getAttribute("data-excluir")) {
				$("#lblExcluirSessao").text(sessao.nome);

				$("#txtModalExcluirSessao").val("");

				$("#modalExcluirSessao").modal({
					backdrop: "static",
					keyboard: true
				});
			} else if (this.getAttribute("data-share")) {
				var str = gerarLinkDeCompartilhamento(sessao.nome);

				var a = _("aLinkSessao");
				a.setAttribute("href", str);
				a.textContent = str;

				a = _("btnLinkSessao");
				a.setAttribute("data-clipboard-text", str);

				$("#modalLinkSessao").modal({
					backdrop: "static",
					keyboard: true
				});
			} else {
				clonar = this.getAttribute("data-clonar");

				resetForm("#formAlterarSessao");

				aceites = null;

				if (clonar) {
					$("#lblAlterarSessao").text("Criar Sessão");

					$("#modalAlterarSessao").modal({
						backdrop: "static",
						keyboard: true
					});
				} else {

					Notification.wait();

					$("#lblAlterarSessao").text("Salvar Alterações");

					JsonWebApi.get("/api/sessao/listarAceites", function (response) {
						if (response.success) {
							Notification.hide();
							if (response.value && response.value.length) {
								aceites = {};
								for (var i = response.value.length - 1; i >= 0; i--)
									aceites[response.value[i].ideventopalestrante] = response.value[i].aceite;
							}
							$("#modalAlterarSessao").modal({
								backdrop: "static",
								keyboard: true
							});
						} else {
							Notification.error("Não foi possível obter o estado de aceite dos palestrantes " + emoji.sad, true);
						}
					}, "id", sessao.id);
				}
			}
		});

		function preencherDadosSessao(s) {
			var tmp = eventoDatasPorId[s.ideventodata];
			s.data = format2(tmp.dia) + "/" + format2(tmp.mes) + "/" + tmp.ano;
			tmp = eventoHorariosPorId[s.ideventohorario];
			s.inicio = tmp.inicio;
			s.termino = tmp.termino;
			tmp = eventoLocaisPorIdEventoLocal[s.ideventolocal];
			s.idlocal = tmp.id;
			s.nome_local = tmp.nome;
			s.sigla_unidade = tmp.sigla_unidade;
			tmp = eventoCursosPorId[s.idcurso];
			s.nome_curso = tmp.nome;
			tmp = eventoFormatosPorId[s.idformato];
			s.nome_formato = tmp.nome;
			tmp = eventoTipoSessoesPorId[s.idtiposessao];
			s.nome_tipo = tmp.nome;
			tmp = eventoVerticaisPorId[s.idvertical];
			s.nome_vertical = tmp.nome;
		}

		$("#formAlterarSessao").validate({
			rules: {
				cbSessaoData: {
					required: true
				},
				cbSessaoHorario: {
					required: true
				},
				cbSessaoLocal: {
					required: true
				},
				txtSessaoNome: {
					required: true,
					minlength: 3,
					maxlength: 100
				},
				txtSessaoNomeCurto: {
					maxlength: 45
				},
				txtSessaoUrlRemota: {
					maxlength: 100
				},
				txtSessaoDescricao: {
					maxlength: 200
				},
				cbSessaoOculta: {
					required: true
				},
				cbSessaoCurso: {
					required: true
				},
				cbSessaoFormato: {
					required: true
				},
				cbSessaoTipo: {
					required: true
				},
				cbSessaoVertical: {
					required: true
				},
				txtSessaoPublicoAlvo: {
					maxlength: 100
				},
				txtSessaoTags: {
					maxlength: 100
				},
				txtSessaoPalestranteNovoEmail: {
					email: true,
					maxlength: 100
				}
			},
			submitHandler: function (form) {
				if ($.active || JsonWebApi.active)
					return;

				var sessao, i, stags, s = {
					idevento: idevento,
					ideventodata: parseInt($("#cbSessaoData").val()),
					ideventohorario: parseInt($("#cbSessaoHorario").val()),
					ideventolocal: parseInt($("#cbSessaoLocal").val()),
					nome: trim($("#txtSessaoNome").val()),
					nome_curto: trim($("#txtSessaoNomeCurto").val()),
					url_remota: trim($("#txtSessaoUrlRemota").val()),
					descricao: trim($("#txtSessaoDescricao").val()),
					oculta: parseInt($("#cbSessaoOculta").val()),
					permiteinscricao: parseInt($("#cbSessaoPermiteInscricao").val()),
					idcurso: parseInt($("#cbSessaoCurso").val()),
					idformato: parseInt($("#cbSessaoFormato").val()),
					idtiposessao: parseInt($("#cbSessaoTipo").val()),
					idvertical: parseInt($("#cbSessaoVertical").val()),
					publico_alvo: trim($("#txtSessaoPublicoAlvo").val()),
					tags: trim($("#txtSessaoTags").val()).toUpperCase(),
					idspalestrante: []
				};

				if (!s.nome_curto)
					s.nome_curto = (s.nome.length <= 45 ? s.nome : s.nome.substr(0, 45));

				stags = s.tags.split(",");
				for (var i = 0; i < stags.length; i++) {
					stags[i] = trim(stags[i]);
					if (!stags[i]) {
						stags.splice(i, 1);
						i--;
					}
				}
				s.tags = stags.join(", ");

				$("#tabelaSessaoPalestranteBody>tr").each(function (i, tr) { s.idspalestrante.push(parseInt(tr.getAttribute("data-id"))); });

				Notification.wait();

				if (trClicada && (sessao = tabela.row(trClicada).data())) {
					s.id = sessao.id;

					JsonWebApi.post("/api/sessao/alterar", s, function (response) {
						if (response.success) {
							sessao.ideventodata = s.ideventodata;
							sessao.ideventohorario = s.ideventohorario;
							sessao.ideventolocal = s.ideventolocal;
							sessao.nome = s.nome;
							sessao.nome_curto = s.nome_curto;
							sessao.url_remota = s.url_remota;
							sessao.descricao = s.descricao;
							sessao.oculta = s.oculta;
							sessao.permiteinscricao = s.permiteinscricao;
							sessao.idcurso = s.idcurso;
							sessao.idformato = s.idformato;
							sessao.idtiposessao = s.idtiposessao;
							sessao.idvertical = s.idvertical;
							sessao.publico_alvo = s.publico_alvo;
							sessao.tags = s.tags;
							sessao.idspalestrante = s.idspalestrante;
							preencherDadosSessao(sessao);
							Notification.success("Sessão alterada com sucesso! " + emoji.happy);
							tabela.row(trClicada).invalidate().draw();
							if (naoFecharModal) {
								naoFecharModal = false;
							} else {
								trClicada = null;
								$("#modalAlterarSessao").modal("hide");
							}
						} else {
							Notification.error(response.value, true);
						}
					});
				} else {
					JsonWebApi.post("/api/sessao/criar", s, function (response) {
						if (response.success) {
							resetForm("#formAlterarSessao");
							_("cbSessaoPermiteInscricao").value = "1";
							$("#tabelaSessaoPalestranteBody").empty();
							$("#tabelaSessaoPalestrante").hide();
							s.id = parseInt(response.value);
							s.inscritos = 0;
							s.presentes = 0;
							s.avaliacoes = "-";
							s.media = "-";
							preencherDadosSessao(s);
							eventoSessoesPorId[s.id] = s;
							eventoSessoes.push(s);
							Notification.success("Sessão criada com sucesso! " + emoji.happy);
							tabela.row.add(s).draw();
						} else {
							Notification.error(response.value, true);
						}
						trClicada = null;
					});
				}
			}
		});

		window.criarSessao = function () {
			if ($.active || JsonWebApi.active)
				return;

			trClicada = null;
			aceites = null;

			resetForm("#formAlterarSessao");

			$("#lblAlterarSessao").text("Criar Sessão");

			$("#modalAlterarSessao").modal({
				backdrop: "static",
				keyboard: true
			});
		};

		window.excluirSessao = function () {
			if ($.active || JsonWebApi.active || !trClicada)
				return;

			var sessao = tabela.row(trClicada).data();

			var nome = $("#txtModalExcluirSessao").val().toUpperCase();
			if (nome !== sessao.nome.toUpperCase()) {
				Notification.error("O nome da sessão não confere", true);
				return;
			}

			$("#modalExcluirSessao").modal("hide");

			Notification.wait();

			JsonWebApi.get("/api/sessao/excluir", function (response) {
				if (response.success) {
					delete eventoSessoesPorId[sessao.id];
					for (var i = eventoSessoes.length - 1; i >= 0; i--) {
						if (eventoSessoes[i].id === sessao.id) {
							eventoSessoes.splice(i, 1);
							break;
						}
					}
					Notification.success("Sessão excluída com sucesso! \uD83D\uDE04");
					tabela.row(trClicada).remove().draw();
				} else {
					Notification.error(response.value, true);
				}
				trClicada = null;
			}, "id", sessao.id);
		};

		function criarGridData(data) {
			var div, html, i, j, k, s, h, tr, local, cor, estilo, ideventodata = data.id, ideventohorario, ideventolocal;

			div = document.createElement("div");
			div.className = "table-responsive";

			html = '<table id="gridData' + ideventodata + '" class="grid-data table table-striped table-hover no-margin-bottom"><thead><tr><th class="left">Local</th>';
			for (i = 0; i < eventoHorarios.length; i++) {
				h = eventoHorarios[i];
				html += '<th>' + h.inicio + ' - ' + h.termino + '</th>';
			}
			html += '</tr></thead><tbody>'

			for (i = 0; i < eventoLocais.length; i++) {
				local = eventoLocais[i];
				ideventolocal = local.ideventolocal;

				cor = local.cor;

				tr = '<tr><td class="left" ' + (cor < 0 ? '' : ('style="color: ' + textColorForBackground(cor) + '; background-color: ' + intToColor(cor) + ';"')) + '>' + encode(local.nome) + '</td>';

				for (j = 0; j < eventoHorarios.length; j++) {
					tr += '<td>';

					ideventohorario = eventoHorarios[j].id;

					for (k = 0; k < eventoSessoes.length; k++) {
						s = eventoSessoes[k];

						if (s.ideventodata !== ideventodata ||
							s.ideventohorario !== ideventohorario ||
							s.ideventolocal !== ideventolocal)
							continue;

						tr += encode(s.nome_curto || s.nome);
						break;
					}

					tr += '</td>';
				}

				tr += '</tr>';

				html += tr;
			}

			html += '</tbody></table>';

			$(div).html(html);

			return div;
		}

		window.mostrarGridData = function () {
			if ($.active || JsonWebApi.active)
				return;

			var i, html, data, tabContent, tabPanel, $modalGridDataBody = $("#modalGridDataBody");

			html = '<ul class="nav nav-pills text-center col-xs-space-bottom" role="tablist">';

			for (i = 0; i < eventoDatas.length; i++) {
				data = eventoDatas[i];

				if (i)
					html += ' ';

				html += '<li role="presentation"';

				if (!i)
					html += ' class="active"';

				html += '><a id="a-gridData' + data.id + '" href="#tab-gridData' + data.id + '" role="tab" data-toggle="pill" aria-controls="tab-gridData' + data.id + '"';

				html += (i ? ' aria-expanded="false"' : ' aria-expanded="true"');

				html += '><i class="fa fa-calendar-o"></i>' + format2(data.dia) + '/' + format2(data.mes) + '</a></li>';
			}

			html += '</ul>';

			$modalGridDataBody.html(html);

			tabContent = document.createElement("div");
			tabContent.className = "tab-content";

			for (i = 0; i < eventoDatas.length; i++) {
				data = eventoDatas[i];

				tabPanel = document.createElement("div");
				tabPanel.className = (i ? "tab-pane" : "tab-pane active");
				tabPanel.setAttribute("id", "tab-gridData" + data.id);
				tabPanel.setAttribute("role", "tabpanel");

				tabPanel.appendChild(criarGridData(data));

				tabContent.appendChild(tabPanel);
			}

			$modalGridDataBody.append(tabContent);

			for (i = 0; i < eventoDatas.length; i++) {
				data = eventoDatas[i];

				prepareDataTable("gridData" + data.id, {
					order: [[0, "asc"]],
					deferRender: false,
					export: { title: "Sessões de " + format2(data.dia) + "-" + format2(data.mes) }
				});
			}

			$("#modalGridDataTitle").text("Grade de Alocações");

			$("#modalGridData").modal({
				backdrop: "static",
				keyboard: true
			});
		};

		window.mostrarGridInscritosGeral = function () {
			if ($.active || JsonWebApi.active)
				return;

			Notification.wait();

			JsonWebApi.get("/api/evento/listarInscritosGeral", function (response) {
				if (response.success) {
					Notification.hide();

					$("#modalGridDataBody").html('<div class="dataTable_wrapper"><table class="table table-striped table-hover" id="tabelaInscritosGeral"></table></div>');

					prepareDataTable("tabelaInscritosGeral", {
						order: [[0, "asc"], [1, "asc"], [2, "asc"], [3, "asc"]],
						deferRender: true,
						columns: [
							{ title: "Data", "class": "col-min text-right", "type": "customdateint", data: "data" },
							{ title: "Início", "class": "col-min text-right", "type": "customtime", render: encode, data: "inicio" },
							{ title: "Término", "class": "col-min text-right", "type": "customtime", render: encode, data: "termino" },
							{ title: "Sessão", render: encode, data: "nome_sessao" },
							{ title: "Local", render: encode, data: "nome_local" },
							{ title: "Curso Âncora", render: encode, data: "nome_curso" },
							{ title: "Participante", render: encode, data: "nome" },
							{ title: "Certificado", "class": "col-min text-center", searchable: false, orderable: false, data: "id", render: function (v, type, row) { return "<button title=\"Link do Certificado\" type=\"button\" class=\"btn btn-outline btn-default\" onclick=\"mostrarCertificadoParticipante(" + v + ")\"><i class=\"fa fa-nomargin fa-id-card-o\"></i></button>"; } },
							{ title: "Login", render: encode, data: "login" },
							{ title: "RG", render: encode, data: "rg" },
							{ title: "E-mail", render: encode, data: "email" },
							{ title: "Tipo", "class": "col-min", data: function (row, type, set, meta) { return (row.tipo === 1 ? "ALUNO" : (row.tipo === 2 ? "FUNCIONÁRIO" : "EXTERNO")); } },
							{ title: "Presente", "class": "col-min text-center", data: function (row, type, set, meta) { return (row.presente ? "SIM" : "NÃO"); } }
						],
						data: response.value,
						export: { title: "Inscritos" }
					});

					$("#modalGridDataTitle").text("Inscritos");

					$("#modalGridData").modal({
						backdrop: "static",
						keyboard: true
					});
				} else {
					Notification.error("Algo saiu errado! Por favor, tente novamente mais tarde \uD83D\uDE22", true);
				}
			});
		};

		window.mostrarCertificadoParticipante = function (idParticipante) {
			if ($.active || JsonWebApi.active)
				return;

			Notification.wait();

			JsonWebApi.get("/api/participante/gerarLinkCertificado/" + idParticipante, function (response) {
				if (response.success) {
					Notification.hide();

					window.open(response.value);
				} else {
					Notification.error("Algo saiu errado! Por favor, tente novamente mais tarde " + emoji.sad);
				}
			});
		};

		window.mostrarGridAvaliacoesEMedias = function () {
			if ($.active || JsonWebApi.active)
				return;

			Notification.wait();

			JsonWebApi.get("/api/evento/listarAvaliacoesEMedias", function (response) {
				if (response.success) {
					Notification.hide();

					var i, sessao, avaliacao, avaliacoes = response.value, data = [];

					for (i = avaliacoes.length - 1; i >= 0; i--) {
						avaliacao = avaliacoes[i];
						if (!(sessao = eventoSessoesPorId[avaliacao.ideventosessao]))
							continue;
						data.push({
							data: sessao.data,
							inicio: sessao.inicio,
							termino: sessao.termino,
							nome_sessao: sessao.nome,
							nome_local: sessao.nome_local,
							nome_curso: sessao.nome_curso,
							avaliacao: avaliacao.avaliacao,
							data_avaliacao: avaliacao.data_avaliacao,
							comentario: avaliacao.comentario || ""
						});
					}

					$("#modalGridDataBody").html('<div class="dataTable_wrapper"><table class="table table-striped table-hover" id="tabelaAvaliacoesIndividuais"></table></div>');

					prepareDataTable("tabelaAvaliacoesIndividuais", {
						order: [[0, "asc"], [1, "asc"], [2, "asc"], [3, "asc"]],
						deferRender: true,
						columns: [
							{ title: "Data", "class": "col-min text-right", "type": "customdateint", data: "data" },
							{ title: "Início", "class": "col-min text-right", "type": "customtime", render: encode, data: "inicio" },
							{ title: "Término", "class": "col-min text-right", "type": "customtime", render: encode, data: "termino" },
							{ title: "Sessão", render: encode, data: "nome_sessao" },
							{ title: "Local", render: encode, data: "nome_local" },
							{ title: "Curso Âncora", render: encode, data: "nome_curso" },
							{ title: "Nota", "class": "col-min text-right", "type": "number", data: "avaliacao" },
							{ title: "Data da Avaliação", "class": "col-min text-right", "type": "customdateint", data: "data_avaliacao" },
							{ title: "Comentário", render: encode, data: "comentario" },
						],
						data: data,
						export: { title: "Avaliações e Comentários" }
					});

					$("#modalGridDataTitle").text("Avaliações e Comentários");

					$("#modalGridData").modal({
						backdrop: "static",
						keyboard: true
					});
				} else {
					Notification.error("Algo saiu errado! Por favor, tente novamente mais tarde \uD83D\uDE22", true);
				}
			});
		};

		window.mostrarGridPalestrantesGeral = function () {
			if ($.active || JsonWebApi.active)
				return;

			Notification.wait();

			JsonWebApi.get("/api/evento/listarPalestrantesGeral", function (response) {
				if (response.success) {
					Notification.hide();

					$("#modalGridDataBody").html('<div class="dataTable_wrapper"><table class="table table-striped table-hover" id="tabelaPalestrantesGeral"></table></div>');

					prepareDataTable("tabelaPalestrantesGeral", {
						order: [[0, "asc"], [1, "asc"], [2, "asc"], [3, "asc"], [6, "asc"]],
						deferRender: true,
						columns: [
							{ title: "Data", "class": "col-min text-right", "type": "customdateint", data: "data" },
							{ title: "Início", "class": "col-min text-right", "type": "customtime", render: encode, data: "inicio" },
							{ title: "Término", "class": "col-min text-right", "type": "customtime", render: encode, data: "termino" },
							{ title: "Sessão", render: encode, data: "nome_sessao" },
							{ title: "Local", render: encode, data: "nome_local" },
							{ title: "Curso Âncora", render: encode, data: "nome_curso" },
							{ title: "Palestrante", render: encode, data: "nome" },
							{ title: "E-mail", render: encode, data: "email" },
							{ title: "Oculto", "class": "col-min text-center", data: function (row, type, set, meta) { return (row.oculto ? "SIM" : "NÃO"); } },
							{ title: "Confirmado", "class": "col-min text-center", data: function (row, type, set, meta) { return (row.confirmado ? "SIM" : "NÃO"); } }
						],
						data: response.value,
						export: { title: "Palestrantes" }
					});

					$("#modalGridDataTitle").text("Palestrantes");

					$("#modalGridData").modal({
						backdrop: "static",
						keyboard: true
					});
				} else {
					Notification.error("Algo saiu errado! Por favor, tente novamente mais tarde \uD83D\uDE22", true);
				}
			});
		};

		var txtSessaoPalestranteNovoNome = _("txtSessaoPalestranteNovoNome"),
			txtSessaoPalestranteNovoEmail = _("txtSessaoPalestranteNovoEmail"),
			txtSessaoPalestranteNovoEmpresa = _("txtSessaoPalestranteNovoEmpresa");

		window.criarEAdicionarNovoPalestrante = function () {
			if ($.active || JsonWebApi.active)
				return;

			var i, idempresa = 0,
				nome = trim(txtSessaoPalestranteNovoNome.value).normalize(),
				email = trim(txtSessaoPalestranteNovoEmail.value).normalize().toUpperCase(),
				nome_empresa = trim(txtSessaoPalestranteNovoEmpresa.value).normalize(),
				nome_empresa_upper = nome_empresa.toUpperCase();

			if (nome.length < 3 || nome.length > 100) {
				Notification.error("Nome inválido " + emoji.sad, true);
				return;
			}

			if (!isEmail(email)) {
				Notification.error("E-mail inválido " + emoji.sad, true);
				return;
			}

			if (nome_empresa.length < 3 || nome_empresa.length > 100) {
				Notification.error("Empresa inválida " + emoji.sad, true);
				return;
			}

			function criarPalestrante() {
				var p = {
					idevento: idevento,
					idempresa: idempresa,
					nome_empresa: eventoEmpresasPorId[idempresa].nome,
					nome: nome,
					nome_curto: (nome.length <= 45 ? nome : nome.substr(0, 45)),
					email: email,
					oculto: 0,
					prioridade: 0,
					cargo: "",
					url_site: "",
					url_twitter: "",
					url_facebook: "",
					url_linkedin: "",
					cargo: "",
					bio: "",
					bio_curta: "",
					versao: 0
				};

				var formData = new FormData();
				formData.append("idevento", p.idevento);
				formData.append("idempresa", p.idempresa);
				formData.append("nome", p.nome);
				formData.append("nome_curto", p.nome_curto);
				formData.append("email", p.email);
				formData.append("oculto", p.oculto);
				formData.append("prioridade", p.prioridade);
				formData.append("cargo", p.cargo);
				formData.append("url_site", p.url_site);
				formData.append("url_twitter", p.url_twitter);
				formData.append("url_facebook", p.url_facebook);
				formData.append("url_linkedin", p.url_linkedin);
				formData.append("bio", p.bio);
				formData.append("bio_curta", p.bio_curta);
				formData.append("versao", p.versao);
				formData.append("imagem", new Blob([gerarPNGVazio()], { type: "image/png" }));

				JsonWebApi.postFormData("/api/palestrante/criar", formData, function (response) {
					if (response.success) {
						txtSessaoPalestranteNovoNome.value = "";
						txtSessaoPalestranteNovoEmail.value = "";
						txtSessaoPalestranteNovoEmpresa.value = "";
						p.id = parseInt(response.value);
						eventoPalestrantesPorId[p.id] = p;
						eventoPalestrantes.push(p);
						eventoPalestrantes.sort(comparadorNome);
						$("#cbSessaoPalestrante").append('<option value="' + p.id + '">' + encode(p.nome) + '</option>');
						setCbSearch(_("cbSessaoPalestrante"), p.id.toString());
						Notification.success("Palestrante criado com sucesso! " + emoji.happy);
						var tabela = _("tabela-palestrantes");
						if (tabela) {
							tabela = $(tabela).DataTable();
							tabela.row.add(p).draw();
						}
						window.adicionarPalestrante(p.id);

						if (trClicada) {
							naoFecharModal = true;
							$("#formAlterarSessao").submit();
						}
					} else {
						Notification.error(response.value, true);
					}
				});
			}

			for (i = eventoEmpresas.length - 1; i >= 0; i--) {
				if (eventoEmpresas[i].nome.toUpperCase() === nome_empresa_upper) {
					idempresa = eventoEmpresas[i].id;
					nome_empresa = eventoEmpresas[i].nome;
					break;
				}
			}

			Notification.wait();

			if (idempresa) {
				criarPalestrante();
			} else {
				var e = {
					idevento: idevento,
					nome: nome_empresa,
					nome_curto: (nome_empresa.length <= 45 ? nome_empresa : nome_empresa.substr(0, 45)),
					url_site: "",
					idtipo: eventoEmpresasPorId[idempresapadrao].idtipo,
					nome_tipo: eventoEmpresasPorId[idempresapadrao].nome_tipo,
					versao: 0
				};

				var formData = new FormData();
				formData.append("idevento", e.idevento);
				formData.append("nome", e.nome);
				formData.append("nome_curto", e.nome_curto);
				formData.append("url_site", e.url_site);
				formData.append("idtipo", e.idtipo);
				formData.append("versao", e.versao);
				formData.append("imagem", new Blob([gerarPNGVazio()], { type: "image/png" }));

				JsonWebApi.postFormData("/api/empresa/criar", formData, function (response) {
					if (response.success) {
						e.id = parseInt(response.value);
						idempresa = e.id;
						eventoEmpresasPorId[e.id] = e;
						eventoEmpresas.push(e);
						eventoEmpresas.sort(comparadorNome);
						var tabela = _("tabela-empresas");
						if (tabela) {
							tabela = $(tabela).DataTable();
							tabela.row.add(e).draw();
						}
						criarPalestrante();
					} else {
						Notification.error(response.value, true);
					}
				});
			}
		}

		function keydownPalestranteNovo(e) {
			if (e.key == "Enter" || e.keyCode == 13)
				return cancelEvent(e);
		}

		function keyupPalestranteNovo(e) {
			if (e.key == "Enter" || e.keyCode == 13) {
				cancelEvent(e);
				window.criarEAdicionarNovoPalestrante();
				return false;
			}
		}

		txtSessaoPalestranteNovoNome.onkeydown = keydownPalestranteNovo;
		txtSessaoPalestranteNovoNome.onkeyup = keyupPalestranteNovo;
		txtSessaoPalestranteNovoEmail.onkeydown = keydownPalestranteNovo;
		txtSessaoPalestranteNovoEmail.onkeyup = keyupPalestranteNovo;
		txtSessaoPalestranteNovoEmpresa.onkeydown = keydownPalestranteNovo;
		txtSessaoPalestranteNovoEmpresa.onkeyup = keyupPalestranteNovo;
	});

	//]]>
</script>
